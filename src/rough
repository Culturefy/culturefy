// import React from "react";
// import ReactDOM from "react-dom";

// import "./styles.css";

// class App extends React.Component {
//   state = {
//     tabs: [
//       { name: "Tab 1", content: "Wow this is tab 1" },
//       { name: "Tab 2", content: "Look at me, it's Tab 2" }
//     ],
//     currentTab: { name: "Tab 1", content: "Wow this is tab 1" }
//   };

//   createTabs = () => {
//     const { tabs, currentTab } = this.state;

//     const allTabs = tabs.map(tab => {
//       return (
//         <li>
//           <button
//             className={currentTab.name == tab.name ? "tab active" : "tab"}
//             onClick={() => this.handleSelectTab(tab)}
//           >
//             {tab.name}
//           </button>
//         </li>
//       );
//     });

//     return <ul className="nav nav-tabs">{allTabs}</ul>;
//   };

//   handleSelectTab = tab => {
//     this.setState({
//       currentTab: tab
//     });
//   };

//   handleAddTab = () => {
//     const { tabs } = this.state;

//     const newTabObject = {
//       name: `Tab ${tabs.length + 1}`,
//       content: `This is Tab ${tabs.length + 1}`
//     };

//     this.setState({
//       tabs: [...tabs, newTabObject],
//       currentTab: newTabObject
//     });
//   };

//   render() {
//     const { currentTab } = this.state;
//     return (
//       <div className="container">
//         <div className="well">
//           <button className="add-tab-button" onClick={this.handleAddTab}>
//             <i className="text-primary fas fa-plus-square" /> Add Tab
//           </button>
//           {this.createTabs()}
//           <div className="tab-content">{currentTab.content}</div>
//         </div>
//       </div>
//     );
//   }
// }

// const rootElement = document.getElementById("root");
// ReactDOM.render(<App />, rootElement);



import React, { Fragment, useEffect, useState } from 'react';
import Modal from '../../components/Modal';
import { InputsSection } from '../../components/Modal/InputsSection';
import ModalForm from '../../components/Modal/ModalForm';
import ModalTextBox from '../../components/Modal/ModalTextBox';
import ModalHeading from '../../components/Modal/ModalHeading';
import ProviderFormModal from './ProviderFormModal.css'
import { AddClientSkeleton, ManageClientSkeleton } from '../../components/Skeletons/ManageClient';
import TextAreaInput from '../../components/Modal/TextAreaInput';
import ModalCheckBox from '../../components/Modal/ModalCheckBox';
import { useDispatch, useSelector } from 'react-redux';
import { getDemographicDetailsAction, getHealthHistoryDetailsAction, getLaboratoryDetailsAction, getPatientVisitDetailsAction, getProviderNotesDetailsAction, saveDemographicDetailsAction, saveHealthHistoryDetailsAction, saveLaboratoryDetailsAction, savePatientVisitDetailsAction, saveProviderNotesDetailsAction } from '../../redux/actions/providerActions';
import { SAVE_DEMOGRAPHIC_DETAIL_RESET, SAVE_PATIENT_VISIT_DETAIL_RESET, SAVE_HEALTH_HISTORY_DETAIL_RESET, SAVE_LABORATORY_DETAIL_RESET, SAVE_PROVIDER_NOTES_DETAIL_RESET } from '../../redux/constants/providerConstants';
import { toast } from 'react-toastify';
import { inputPhoneMasking, twoDigitMask, unMasking, validateOnlyNumber, zipCodeMask } from '../../utils/validators';
import moment from 'moment';

import {
    raceList, HealthHistoryCheckBoxList,
    addDemographicModal, addDemographicModalError,
    addHealthHistoryModal, addHealthHistoryModalError,
    addLaboratoryModal, addLaboratoryModalError,
    addPatientVisitModal, addPatientVisitModalError,
    addProviderNotesModal, addProviderNotesModalError,
} from './ProviderDataModal';
import LabTable from './LabTable';
import ProviderNotesTable from './ProviderNotestable';
import TimeInputDropdown from '../../components/Modal/TimeInputDropdown';

const AddProviderFormModal = ({ data }) => {
    const dispatch = useDispatch();

    const {
        addProviderFormState,
        setAddProviderFormState,
        selectPatient,
        setSelectPatient
    } = data;

    const [checked, setChecked] = useState('checked1');
    const [checkBoxList, setCheckBoxList] = useState(null);

    const saveDemographic = useSelector((state) => state.saveDemographic);
    const saveHealthHistory = useSelector((state) => state.saveHealthHistory);
    const saveLaboratory = useSelector((state) => state.saveLaboratory);
    const savePatientVisit = useSelector((state) => state.savePatientVisit);
    const saveProviderNotes = useSelector((state) => state.saveProviderNotes);

    const getDemographic = useSelector((state) => state.getDemographic);
    const getHealthHistory = useSelector((state) => state.getHealthHistory);
    const getLaboratory = useSelector((state) => state.getLaboratory);
    const getPatientVisit = useSelector((state) => state.getPatientVisit);
    const getProviderNotes = useSelector((state) => state.getProviderNotes);


    useEffect(() => {
        setCheckBoxList([...HealthHistoryCheckBoxList]);
        //console.log(checkBoxList)
        if (selectPatient && selectPatient.applicationUserId) {
            dispatch(getDemographicDetailsAction(selectPatient.applicationUserId));
            dispatch(getHealthHistoryDetailsAction(selectPatient.applicationUserId));
            dispatch(getPatientVisitDetailsAction(selectPatient.applicationUserId));
            dispatch(getLaboratoryDetailsAction(selectPatient.applicationUserId));
            dispatch(getProviderNotesDetailsAction(selectPatient.applicationUserId));

            return () => {
                dispatch({ type: SAVE_DEMOGRAPHIC_DETAIL_RESET });
                dispatch({ type: SAVE_HEALTH_HISTORY_DETAIL_RESET });
                dispatch({ type: SAVE_PATIENT_VISIT_DETAIL_RESET });
                dispatch({ type: SAVE_LABORATORY_DETAIL_RESET });
                dispatch({ type: SAVE_PROVIDER_NOTES_DETAIL_RESET });
            }
        }
    }, [selectPatient, dispatch]);

    useEffect(() => {
        //console.log(getDemographic, 'getDemographic');
        if (getDemographic && getDemographic.data && getDemographic.data.statusCode === true && getDemographic.data.data) {
            //setAddDemographic(getDemographic.data.data);

            setAddDemographic(getDemographic.data.data)
            if (getDemographic.data.data && getDemographic.data.data.morningTime && getDemographic.data.data.afternoonTime && getDemographic.data.data.eveningTime) {
                setAssessmentTime({
                    morning: JSON.stringify(getDemographic.data.data.morningTime && getDemographic.data.data.morningTime.totalHours) + ':00',
                    afternoon: JSON.stringify(getDemographic.data.data.afternoonTime && getDemographic.data.data.afternoonTime.totalHours) + ':00',
                    evening: JSON.stringify(getDemographic.data.data.eveningTime && getDemographic.data.data.eveningTime.totalHours) + ':00'
                })
            }


        } else if (getDemographic && getDemographic.error) {
            var today = new Date();
            var birthDate = new Date(selectPatient.birthDate);
            var age = today.getFullYear() - birthDate.getFullYear();
            var m = today.getMonth() - birthDate.getMonth();
            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
                age--;
            }
            setAddDemographic({
                ...addDemographic,
                firstName: selectPatient.patientFirstName, lastName: selectPatient.patientLastName, age: age, doB: selectPatient.birthDate
            });
        }
    }, [getDemographic])


    useEffect(() => {
        //console.log(checkBoxList)
        //console.log(getHealthHistory, 'getHealthHistory');
        if (getHealthHistory && getHealthHistory.data && getHealthHistory.data.statusCode === true && getHealthHistory.data.data) {
            setBMI({
                value: getHealthHistory.data.data.bmi,
                error: ''
            });
            let arr = [];

            let ar = [];

            HealthHistoryCheckBoxList.map((item) => {

                item.services.map(service => {
                    if (item.title === 'General') {
                        arr = getHealthHistory.data.data.general.split(",").map(item => item.trim())
                    } else if (item.title === 'Skin') {
                        arr = getHealthHistory.data.data.skin.split(",").map(item => item.trim())
                    } else if (item.title === 'HEENT') {
                        arr = getHealthHistory.data.data.heent.split(",").map(item => item.trim())
                    } else if (item.title === 'Respiratory') {
                        arr = getHealthHistory.data.data.respiratory.split(",").map(item => item.trim())
                    } else if (item.title === 'Cardiac') {
                        arr = getHealthHistory.data.data.cardiac.split(",").map(item => item.trim())
                    } else if (item.title === 'GI') {
                        arr = getHealthHistory.data.data.gi.split(",").map(item => item.trim())
                    } else if (item.title === 'Urinary') {
                        arr = getHealthHistory.data.data.urinary.split(",").map(item => item.trim())
                    } else if (item.title === 'Musculskeletal') {
                        arr = getHealthHistory.data.data.musculskeletal.split(",").map(item => item.trim())
                    } else if (item.title === 'Neurologic') {
                        arr = getHealthHistory.data.data.neurologic.split(",").map(item => item.trim())
                    } else if (item.title === 'Hematologic') {
                        arr = getHealthHistory.data.data.hematologic.split(",").map(item => item.trim())
                    } else if (item.title === 'Psychiatric') {
                        arr = getHealthHistory.data.data.psychiatric.split(",").map(item => item.trim())
                    }
                    arr.forEach(element => {
                        if (service.title === element) {
                            service.checked = true;
                            ar = ([...HealthHistoryCheckBoxList])
                        } else {
                            ar = ([...HealthHistoryCheckBoxList])
                        }
                    })
                })
            })
            //console.log(ar)
            setCheckBoxList([...ar])

            //setCheckBoxList([...HealthHistoryCheckBoxList]);
            setAddHealthHistory(getHealthHistory.data.data);
        }
    }, [getHealthHistory])

    useEffect(() => {
        //console.log(getLaboratory, 'getLaboratory');
        if (getLaboratory && getLaboratory.data && getLaboratory.data.statusCode === true && getLaboratory.data.data) {
            // setAddLaboratory(getLaboratory.data.data);
            setGetLabData(getLaboratory.data.data);
        }
    }, [getLaboratory])



    useEffect(() => {
        //console.log(getPatientVisit, 'getPatientVisit');
        if (getPatientVisit && getPatientVisit.data && getPatientVisit.data.statusCode === true && getPatientVisit.data.data) {
            setAddPatientVisit(getPatientVisit.data.data);
        }
    }, [getPatientVisit])



    useEffect(() => {
        //console.log(getProviderNotes, 'getProviderNotes');
        if (getProviderNotes && getProviderNotes.data && getProviderNotes.data.statusCode === true && getProviderNotes.data.data) {
            // setAddProviderNotes(getProviderNotes.data.data[0]);
            setAddProviderNotesData(getProviderNotes.data.data)
            //console.log(getProviderNotes.data.data)
        }
    }, [getProviderNotes])

    //save Demographic
    useEffect(
        () => {
            if (saveDemographic && saveDemographic.data && saveDemographic.data.statusCode === true) {
                dispatch(getDemographicDetailsAction(selectPatient.applicationUserId));
                toast.success(saveDemographic.data.message)
                dispatch({ type: SAVE_DEMOGRAPHIC_DETAIL_RESET });
            } else if (saveDemographic && saveDemographic.data && saveDemographic.data.message && saveDemographic.data.statusCode === false) {
                toast.success(saveDemographic.data.message)
            }
        },
        [saveDemographic, dispatch]
    );

    //save Health History
    useEffect(
        () => {
            if (saveHealthHistory && saveHealthHistory.data && saveHealthHistory.data.statusCode === true) {
                dispatch(getHealthHistoryDetailsAction(selectPatient.applicationUserId));
                toast.success(saveHealthHistory.data.message)
                dispatch({ type: SAVE_HEALTH_HISTORY_DETAIL_RESET });
            } else if (saveHealthHistory && saveHealthHistory.data && saveHealthHistory.data.message && saveHealthHistory.data.statusCode === false) {
                toast.success(saveHealthHistory.data.message)
            }
        },
        [saveHealthHistory, dispatch]
    );

    //Patient Visit
    useEffect(
        () => {
            if (savePatientVisit && savePatientVisit.data && savePatientVisit.data.statusCode === true) {
                dispatch(getPatientVisitDetailsAction(selectPatient.applicationUserId));
                toast.success(savePatientVisit.data.message)
                dispatch({ type: SAVE_PATIENT_VISIT_DETAIL_RESET });
            } else if (savePatientVisit && savePatientVisit.data && savePatientVisit.data.message && savePatientVisit.data.statusCode === false) {
                toast.success(savePatientVisit.data.message)
            }
        },
        [savePatientVisit, dispatch]
    );


    //save Laboratory
    useEffect(
        () => {
            if (saveLaboratory && saveLaboratory.data && saveLaboratory.data.statusCode === true) {
                dispatch(getLaboratoryDetailsAction(selectPatient.applicationUserId));
                toast.success(saveLaboratory.data.message)
                setAddLaboratory(
                    {
                        cbc: "",
                        bmp: "",
                        uds: "",
                        ekg: "",
                    }
                );
                dispatch({ type: SAVE_LABORATORY_DETAIL_RESET });
            } else if (saveLaboratory && saveLaboratory.data && saveLaboratory.data.message && saveLaboratory.data.statusCode === false) {
                toast.success(saveLaboratory.data.message)
            }
        },
        [saveLaboratory, dispatch]
    );


    //save Provider Notes
    useEffect(
        () => {
            if (saveProviderNotes && saveProviderNotes.data && saveProviderNotes.data.statusCode === true) {
                dispatch(getProviderNotesDetailsAction(selectPatient.applicationUserId));
                toast.success(saveProviderNotes.data.message)
                setAddProviderNotes({
                    nrs: "",
                    notes: "",
                });
                dispatch({ type: SAVE_PROVIDER_NOTES_DETAIL_RESET });
            } else if (saveProviderNotes && saveProviderNotes.data && saveProviderNotes.data.message && saveProviderNotes.data.statusCode === false) {
                toast.success(saveProviderNotes.data.message)
            }
        },
        [saveProviderNotes, dispatch]
    );

    const [assessmentTime, setAssessmentTime] = useState({ morning: '', afternoon: '', evening: '' })
    const [assessmentTimeError, setAssessmentTimeError] = useState({ morning: '', afternoon: '', evening: '' })

    const [addDemographic, setAddDemographic] = useState(
        {
            firstName: "",
            lastName: "",
            mobilePhone: "",
            homePhone: "",
            age: "",
            doB: "",
            gender: "",
            race: "",
            raceSpesification: "",
            ethnicity: "",
            preferredLanguage: "",
            emergencyContactName: "",
            emergencyHomePhone: "",
            emergencyMobilePhone: "",
            address1: "",
            address2: "",
            city: "",
            state: "",
            zip: ""
        }
    );
    const [addDemographicError, setAddDemographicError] = useState(
        {
            firstNameError: "",
            lastNameError: "",
            mobilePhoneError: "",
            homePhoneError: "",
            ageError: "",
            doBError: "",
            genderError: "",
            raceError: "",
            raceSpesificationError: "",
            ethnicityError: "",
            preferredLanguageError: "",
            emergencyContactNameError: "",
            emergencyHomePhoneError: "",
            emergencyMobilePhoneError: "",
            address1Error: "",
            address2Error: "",
            cityError: "",
            stateError: "",
            zipError: ""
        }
    );

    const [bmi, setBMI] = useState({ value: '', error: '' });

    const [addHealthHistory, setAddHealthHistory] = useState(
        {
            height: "",
            weight: "",
            bmi: 0,
            general: "",
            skin: "",
            heent: "",
            respiratory: "",
            cardiac: "",
            gi: "",
            urinary: "",
            musculskeletal: "",
            neurologic: "",
            hematologic: "",
            psychiatric: "",
        }
    );

    const [addHealthHistoryError, setAddHealthHistoryError] = useState(
        {
            heightError: "",
            weightError: "",
            bmiError: "",
            generalError: "",
            skinError: "",
            heentError: "",
            respiratoryError: "",
            cardiacError: "",
            giError: "",
            urinaryError: "",
            musculskeletalError: "",
            neurologicError: "",
            hematologicError: "",
            psychiatricError: "",
        }
    );

    const [getLabData, setGetLabData] = useState([])
    const [addLaboratory, setAddLaboratory] = useState(
        {
            cbc: "",
            bmp: "",
            uds: "",
            ekg: "",
        }
    );

    const [addLaboratoryError, setAddLaboratoryError] = useState(
        {
            cbc: "",
            bmp: "",
            uds: "",
            ekg: "",
        }
    );

    const [addPatientVisit, setAddPatientVisit] = useState(
        {
            temp: "",
            bp: "",
            hr: "",
            rr: "",
            stairsPreExercise: "",
            takingTime: "",
            stairsPostExercise: "",
            forwardPreExercise: "",
            forwardBending: "",
            rightBending: "",
            leftBending: "",
            forwardPostExersice: "",
            analogScale: "",
            visitNotes: "",
            hydrocodoneAmountDispensed: "",
            hydrocodoneReturned: "",
            tylenolDispensed: "",
            tylenolReturned: "",
            BBFDispensed: "",
            BBFReturned: "",
            // pillCount: "",
            // pgicQuestion1: "",
            // pgicQuestion2: "",
            // "timeTaken": {
            //   "ticks": 0,
            //   "days": 0,
            //   "hours": 0,
            //   "milliseconds": 0,
            //   "minutes": 0,
            //   "seconds": 0
            // },
        }
    );

    const [addPatientVisitError, setAddPatientVisitError] = useState(
        {
            temp: "",
            bp: "",
            hr: "",
            rr: "",
            stairsPreExercise: "",
            takingTime: "",
            stairsPostExercise: "",
            forwardPreExercise: "",
            forwardBending: "",
            rightBending: "",
            leftBending: "",
            forwardPostExersice: "",
            analogScale: "",
            pillCount: "",
            visitNotes: "",
            hydrocodoneAmountDispensed: "",
            hydrocodoneReturned: "",
            tylenolDispensed: "",
            tylenolReturned: "",
            BBFDispensed: "",
            BBFReturned: "",
        }
    );
    const [addProviderNotesData, setAddProviderNotesData] = useState([])
    const [addProviderNotes, setAddProviderNotes] = useState(
        {
            nrs: "",
            notes: "",
        }
    );
    const [addProviderNotesError, setAddProviderNotesError] = useState(
        {
            nrs: "",
            notes: "",
        }
    );

    //All event Handler
    const addDemographicHandler = (e) => {
        e.preventDefault();

        if (!addDemographic.firstName || addDemographic.firstName === '') {
            setAddDemographicError({ ...addDemographicError, firstNameError: 'Please enter first name' });
        } else if (!addDemographic.lastName || addDemographic.lastName === '') {
            setAddDemographicError({ ...addDemographicError, lastNameError: 'Please enter last name' });
        } else if (!addDemographic.age || addDemographic.age === '') {
            setAddDemographicError({ ...addDemographicError, ageError: 'Please enter a age' });
        } else if (!addDemographic.age || !validateOnlyNumber(addDemographic.age)) {
            setAddDemographicError({ ...addDemographicError, ageError: 'Please enter digits only' });
        } else if (!addDemographic.doB || addDemographic.doB === '') {
            setAddDemographicError({ ...addDemographicError, doBError: 'Please select date of birth' });
        } else if (!addDemographic.gender || addDemographic.gender === '') {
            setAddDemographicError({ ...addDemographicError, genderError: 'Please select gender' });
        } else if (!addDemographic.race || addDemographic.race === '') {
            setAddDemographicError({ ...addDemographicError, raceError: 'Please select race' });
        } else if ((addDemographic.race === '3' || addDemographic.race === '6') && (!addDemographic.raceSpesification || addDemographic.raceSpesification === '')) {
            setAddDemographicError({ ...addDemographicError, raceSpesificationError: 'Please specify race' });
        }
        else if (!addDemographic.ethnicity || addDemographic.ethnicity === '') {

            setAddDemographicError({ ...addDemographicError, ethnicityError: 'Please select ethnicity' });
        }
        // else if (!addDemographic.preferredLanguage || addDemographic.preferredLanguage === '') {
        //     setAddDemographicError({ ...addDemographicError, preferredLanguageError: 'Please enter preferred language' });
        // }
        else if (!addDemographic.address1 || addDemographic.address1 === '') {
            setAddDemographicError({ ...addDemographicError, address1Error: 'Please enter address line 1' });
        }
        // else if (!addDemographic.address2 || addDemographic.address2 === '') {
        //     setAddDemographicError({ ...addDemographicError, address2Error: 'Please enter address line 2' });
        // }
        else if (!addDemographic.city || addDemographic.city === '') {
            setAddDemographicError({ ...addDemographicError, cityError: 'Please enter city' });
        } else if (!addDemographic.state || addDemographic.state === '') {
            setAddDemographicError({ ...addDemographicError, stateError: 'Please enter state' });
        } else if (!addDemographic.zip || addDemographic.zip === '') {
            setAddDemographicError({ ...addDemographicError, zipError: 'Please enter zip' });
        } else if (!unMasking(addDemographic.homePhone) || unMasking(addDemographic.homePhone) === '') {

            setAddDemographicError({ ...addDemographicError, homePhoneError: 'Please enter home phone number' });
        } else if (!unMasking(addDemographic.mobilePhone) || unMasking(addDemographic.mobilePhone) === '') {
            setAddDemographicError({ ...addDemographicError, mobilePhoneError: 'Please enter mobile phone number' });
        } else if (!addDemographic.emergencyContactName || addDemographic.emergencyContactName === '') {
            setAddDemographicError({ ...addDemographicError, emergencyContactNameError: 'Please enter contact name' });
        } else if (!unMasking(addDemographic.emergencyHomePhone) || unMasking(addDemographic.emergencyHomePhone) === '') {
            setAddDemographicError({ ...addDemographicError, emergencyHomePhoneError: 'Please enter home phone' });
        } else if (!unMasking(addDemographic.emergencyMobilePhone) || unMasking(addDemographic.emergencyMobilePhone) === '') {
            setAddDemographicError({ ...addDemographicError, emergencyMobilePhoneError: 'Please enter mobile phone' });
        }
        else if (!assessmentTime.morning || assessmentTime.morning === '') {
            setAssessmentTimeError({ ...assessmentTimeError, morning: 'Please enter the start time for Morning assessment' });
        } else if (!assessmentTime.afternoon || assessmentTime.afternoon === '') {
            setAssessmentTimeError({ ...assessmentTimeError, afternoon: 'Please enter the start time for Afternoon assessment' });
        } else if (!assessmentTime.evening || assessmentTime.evening === '') {
            setAssessmentTimeError({ ...assessmentTimeError, evening: 'Please enter the start time for Evening assessment' });
        } else if (assessmentTime.morning === assessmentTime.afternoon || assessmentTime.morning === assessmentTime.evening) {
            setAssessmentTimeError({ ...assessmentTimeError, morning: 'Assessment windows need to be different.' });
        } else if (assessmentTime.afternoon === assessmentTime.evening) {
            setAssessmentTimeError({ ...assessmentTimeError, evening: 'Assessment windows need to be different.' });
        }
        else {
            dispatch(saveDemographicDetailsAction({
                // id: 0,
                patientId: selectPatient.applicationUserId,
                providerId: selectPatient.providerId,
                firstName: addDemographic.firstName,
                lastName: addDemographic.lastName,
                mobilePhone: unMasking(addDemographic.mobilePhone),
                homePhone: unMasking(addDemographic.homePhone),
                age: addDemographic.age,
                doB: addDemographic.doB,
                gender: addDemographic.gender,
                race: addDemographic.race,
                raceSpesification: addDemographic.raceSpesification,
                ethnicity: addDemographic.ethnicity,
                preferredLanguage: addDemographic.preferredLanguage,
                emergencyContactName: addDemographic.emergencyContactName,
                emergencyHomePhone: unMasking(addDemographic.emergencyHomePhone),
                emergencyMobilePhone: unMasking(addDemographic.emergencyMobilePhone),
                address1: addDemographic.address1,
                address2: addDemographic.address2,
                city: addDemographic.city,
                state: addDemographic.state,
                zip: addDemographic.zip,
                morningTakingTime: assessmentTime.morning,
                afternoonTakingTime: assessmentTime.afternoon,
                eveningTakingTime: assessmentTime.evening
            }));
        }
    };
    const addHealthHistoryHandler = (e) => {
        e.preventDefault();

        if (!addHealthHistory.height || addHealthHistory.height === '') {
            setAddHealthHistoryError({ ...addHealthHistoryError, heightError: 'Please enter height' });
        } else if (!addHealthHistory.weight || addHealthHistory.weight === '') {
            setAddHealthHistoryError({ ...addHealthHistoryError, weightError: 'Please enter weight' });
        } else if (!bmi.value || bmi.value === '') {
            setBMI({ ...bmi, error: 'Please enter bmi' });
        } else {
            dispatch(saveHealthHistoryDetailsAction({
                patientId: selectPatient.applicationUserId,
                providerId: selectPatient.providerId,
                height: addHealthHistory.height,
                weight: addHealthHistory.weight,
                bmi: bmi.value,
                general: checkBoxList[0].services.map((el) => { return el.checked ? el.title : 0; }).toString().replaceAll(",0", " "),
                skin: checkBoxList[1].services.map((el) => { return el.checked ? el.title : 0; }).toString().replaceAll(",0", " "),
                heent: checkBoxList[2].services.map((el) => { return el.checked ? el.title : 0; }).toString().replaceAll(",0", " "),
                respiratory: checkBoxList[3].services.map((el) => { return el.checked ? el.title : 0; }).toString().replaceAll(",0", " "),
                cardiac: checkBoxList[4].services.map((el) => { return el.checked ? el.title : 0; }).toString().replaceAll(",0", " "),
                gi: checkBoxList[5].services.map((el) => { return el.checked ? el.title : 0; }).toString().replaceAll(",0", " "),
                urinary: checkBoxList[6].services.map((el) => { return el.checked ? el.title : 0; }).toString().replaceAll(",0", " "),
                musculskeletal: checkBoxList[7].services.map((el) => { return el.checked ? el.title : 0; }).toString().replaceAll(",0", " "),
                neurologic: checkBoxList[8].services.map((el) => { return el.checked ? el.title : 0; }).toString().replaceAll(",0", " "),
                hematologic: checkBoxList[9].services.map((el) => { return el.checked ? el.title : 0; }).toString().replaceAll(",0", " "),
                psychiatric: checkBoxList[10].services.map((el) => { return el.checked ? el.title : 0; }).toString().replaceAll(",0", " "),
            }));
        }
    };

    const addLaboratoryHandler = (e) => {
        e.preventDefault();

        // if (!addLaboratory.cbc || addLaboratory.cbc === '') {
        //     setAddLaboratoryError({ ...addLaboratoryError, cbc: 'Please select CBC' });
        // } else if (!addLaboratory.bmp || addLaboratory.bmp === '') {
        //     setAddLaboratoryError({ ...addLaboratoryError, bmp: 'Please select BMP' });
        // } else if (!addLaboratory.uds || addLaboratory.uds === '') {
        //     setAddLaboratoryError({ ...addLaboratoryError, uds: 'Please select UDS' });
        // } else if (!addLaboratory.ekg || addLaboratory.ekg === '') {
        //     setAddLaboratoryError({ ...addLaboratoryError, ekg: 'Please select EKG' });
        // } else {
        //     dispatch(saveLaboratoryDetailsAction({
        //         patientId: selectPatient.applicationUserId,
        //         providerId: selectPatient.providerId,
        //         cbc: addLaboratory.cbc,
        //         bmp: addLaboratory.bmp,
        //         uds: addLaboratory.uds,
        //         ekg: addLaboratory.ekg,
        //     }));
        // }

        if ((!addLaboratory.cbc || addLaboratory.cbc === '')
            && (!addLaboratory.bmp || addLaboratory.bmp === '')
            && (!addLaboratory.uds || addLaboratory.uds === '')
            && (!addLaboratory.ekg || addLaboratory.ekg === '')) {
            setAddLaboratoryError({ ...addLaboratoryError, cbc: 'Please select at least one field.' })
        } else {
            dispatch(saveLaboratoryDetailsAction({
                patientId: selectPatient.applicationUserId,
                providerId: selectPatient.providerId,
                cbc: addLaboratory.cbc,
                bmp: addLaboratory.bmp,
                uds: addLaboratory.uds,
                ekg: addLaboratory.ekg,
            }));
        }
    };

    const addPatientVisitHandler = (e) => {
        e.preventDefault();
        if (!addPatientVisit.temp || addPatientVisit.temp === '') {
            setAddPatientVisitError({ ...addPatientVisitError, temp: 'Please enter temp' });
        } else if (!addPatientVisit.bp || addPatientVisit.bp === '') {
            setAddPatientVisitError({ ...addPatientVisitError, bp: 'Please enter BP' });
        } else if (!addPatientVisit.hr || addPatientVisit.hr === '') {
            setAddPatientVisitError({ ...addPatientVisitError, hr: 'Please select HR' });
        } else if (!addPatientVisit.rr || addPatientVisit.rr === '') {
            setAddPatientVisitError({ ...addPatientVisitError, rr: 'Please enter RR' });
        } else if (!addPatientVisit.stairsPreExercise || addPatientVisit.stairsPreExercise === '') {
            setAddPatientVisitError({ ...addPatientVisitError, stairsPreExercise: 'Please enter pre-exercise NRS (0-10)' });
        } else if (addPatientVisit.stairsPreExercise !== '' && addPatientVisit.stairsPreExercise > 10) {
            setAddPatientVisitError({ ...addPatientVisitError, stairsPreExercise: 'NRS can only range between (0-10)' });
        } else if (!addPatientVisit.takingTime || addPatientVisit.takingTime === '') {
            setAddPatientVisitError({ ...addPatientVisitError, takingTime: 'Please enter time taken' });
        } else if (!addPatientVisit.stairsPostExercise || addPatientVisit.stairsPostExercise === '') {
            setAddPatientVisitError({ ...addPatientVisitError, stairsPostExercise: 'Please enter Post-exercise NRS (0-10)' });
        } else if (addPatientVisit.stairsPostExercise !== '' && addPatientVisit.stairsPostExercise > 10) {
            setAddPatientVisitError({ ...addPatientVisitError, stairsPostExercise: 'NRS can only range between (0-10)' });
        } else if (!addPatientVisit.forwardPreExercise || addPatientVisit.forwardPreExercise === '') {
            setAddPatientVisitError({ ...addPatientVisitError, forwardPreExercise: 'Please enter forward pre-exercise NRS' });
        } else if (addPatientVisit.forwardPreExercise !== '' && addPatientVisit.forwardPreExercise > 10) {
            setAddPatientVisitError({ ...addPatientVisitError, forwardPreExercise: 'NRS can only range between (0-10)' });
        } else if (!addPatientVisit.forwardBending || addPatientVisit.forwardBending === '') {
            setAddPatientVisitError({ ...addPatientVisitError, forwardBending: 'Please enter forward bending' });
        } else if (!addPatientVisit.rightBending || addPatientVisit.rightBending === '') {
            setAddPatientVisitError({ ...addPatientVisitError, rightBending: 'Please enter right bending' });
        } else if (!addPatientVisit.leftBending || addPatientVisit.leftBending === '') {
            setAddPatientVisitError({ ...addPatientVisitError, leftBending: 'Please enter left bending' });
        } else if (!addPatientVisit.forwardPostExersice || addPatientVisit.forwardPostExersice === '') {
            setAddPatientVisitError({ ...addPatientVisitError, forwardPostExersice: 'Please enter forward post exersice' });
        } else if (addPatientVisit.forwardPostExersice !== '' && addPatientVisit.forwardPostExersice > 10) {
            setAddPatientVisitError({ ...addPatientVisitError, forwardPostExersice: 'NRS can only range between (0-10)' });
        }
        else if (!addPatientVisit.hydrocodoneAmountDispensed || addPatientVisit.hydrocodoneAmountDispensed === '') {
            setAddPatientVisitError({ ...addPatientVisitError, hydrocodoneAmountDispensed: 'Please enter Hydrocodone Amount Dispensed' });
        } else if (!addPatientVisit.hydrocodoneReturned || addPatientVisit.hydrocodoneReturned === '') {
            setAddPatientVisitError({ ...addPatientVisitError, hydrocodoneReturned: 'Please enter Hydrocodone Amount Returned' });
        } else if (!addPatientVisit.tylenolDispensed || addPatientVisit.tylenolDispensed === '') {
            setAddPatientVisitError({ ...addPatientVisitError, tylenolDispensed: 'Please enter Tylenol Amount Dispensed' });
        } else if (!addPatientVisit.tylenolReturned || addPatientVisit.tylenolReturned === '') {
            setAddPatientVisitError({ ...addPatientVisitError, tylenolReturned: 'Please enter Tylenol Amount Returned' });
        } else if (!addPatientVisit.BBFDispensed || addPatientVisit.BBFDispensed === '') {
            setAddPatientVisitError({ ...addPatientVisitError, BBFDispensed: 'Please enter BBF/Placebo Amount Dispensed' });
        } else if (!addPatientVisit.BBFReturned || addPatientVisit.BBFReturned === '') {
            setAddPatientVisitError({ ...addPatientVisitError, BBFReturned: 'Please enter BBF/Placebo Amount Returned' });
        }
        else if (!addPatientVisit.analogScale || addPatientVisit.analogScale === '') {
            setAddPatientVisitError({ ...addPatientVisitError, analogScale: 'Please enter visual analog scale' });
        } else if (!addPatientVisit.visitNotes || addPatientVisit.visitNotes === '') {
            setAddPatientVisitError({ ...addPatientVisitError, visitNotes: 'Please enter visit notes' });
        } else {
            const formData = {
                patientId: selectPatient.applicationUserId,
                providerId: selectPatient.providerId,
                temp: addPatientVisit.temp,
                bp: addPatientVisit.bp,
                hr: addPatientVisit.hr,
                rr: addPatientVisit.rr,
                stairsPreExercise: addPatientVisit.stairsPreExercise,
                stairsPostExercise: addPatientVisit.stairsPostExercise,
                forwardPreExercise: addPatientVisit.forwardPreExercise,
                forwardBending: addPatientVisit.forwardBending,
                rightBending: addPatientVisit.rightBending,
                leftBending: addPatientVisit.leftBending,
                forwardPostExersice: addPatientVisit.forwardPostExersice,
                analogScale: addPatientVisit.analogScale,
                pillCount: "",
                pgicQuestion1: "",
                pgicQuestion2: "",
                visitNotes: addPatientVisit.visitNotes,
                takingTime: addPatientVisit.takingTime,
                hydrocodoneAmountDispensed: addPatientVisit.hydrocodoneAmountDispensed,
                hydrocodoneReturned: addPatientVisit.hydrocodoneReturned,
                tylenolDispensed: addPatientVisit.tylenolDispensed,
                tylenolReturned: addPatientVisit.tylenolReturned,
                BBFDispensed: addPatientVisit.BBFDispensed,
                BBFReturned: addPatientVisit.BBFReturned
            }
            // dispatch(savePatientVisitDetailsAction({
            //     patientId: selectPatient.applicationUserId,
            //     providerId: selectPatient.providerId,
            //     temp: addPatientVisit.temp,
            //     bp: addPatientVisit.bp,
            //     hr: addPatientVisit.hr,
            //     rr: addPatientVisit.rr,
            //     stairsPreExercise: addPatientVisit.stairsPreExercise,
            //     takingTime: addPatientVisit.takingTime,
            //     stairsPostExercise: addPatientVisit.stairsPostExercise,
            //     forwardPreExercise: addPatientVisit.forwardPreExercise,
            //     forwardBending: addPatientVisit.forwardBending,
            //     rightBending: addPatientVisit.rightBending,
            //     leftBending: addPatientVisit.leftBending,
            //     forwardPostExersice: addPatientVisit.forwardPostExersice,
            //     analogScale: addPatientVisit.analogScale,
            //     visitNotes: addPatientVisit.visitNotes,
            //     hydrocodoneAmountDispensed: addPatientVisit.hydrocodoneAmountDispensed,
            //     hydrocodoneReturned: addPatientVisit.hydrocodoneReturned,
            //     tylenolDispensed: addPatientVisit.tylenolDispensed,
            //     tylenolReturned: addPatientVisit.tylenolReturned,
            //     BBFDispensed: addPatientVisit.BBFDispensed,
            //     BBFReturned: addPatientVisit.BBFReturned,
            // }));
            dispatch(savePatientVisitDetailsAction(formData));
        }
    };

    const addProviderNotesHandler = (e) => {
        e.preventDefault();
        // if (!addProviderNotes.nrs || addProviderNotes.nrs === '') {
        //     setAddProviderNotesError({ ...addProviderNotesError, nrs: 'Please enter NRS phone' });
        // } else if (!addProviderNotes.notes || addProviderNotes.notes === '') {
        //     setAddProviderNotesError({ ...addProviderNotesError, notes: 'Please enter notes' });
        // } else {
        //     dispatch(saveProviderNotesDetailsAction({
        //         patientId: selectPatient.applicationUserId,
        //         providerId: selectPatient.providerId,
        //         nrs: addProviderNotes.nrs,
        //         notes: addProviderNotes.notes
        //     }));
        // }
        if ((!addProviderNotes.nrs || addProviderNotes.nrs === '') && (!addProviderNotes.notes || addProviderNotes.notes === '')) {
            setAddProviderNotesError({ ...addProviderNotesError, nrs: 'Please fill at least one field.' });
        } else if (addProviderNotes.nrs !== '' && addProviderNotes.nrs > 10) {
            setAddProviderNotesError({ ...addProviderNotesError, nrs: 'NRS can only range between(0-10)' });
        } else {
            dispatch(saveProviderNotesDetailsAction({
                patientId: selectPatient.applicationUserId,
                providerId: selectPatient.providerId,
                nrs: addProviderNotes.nrs,
                notes: addProviderNotes.notes
            }));
        }

    };

    const onBMIChangeHandler = (height, weight) => {
        //Convert all units to metric
        // if (height) height /= 39.3700787;
        // if (weight) weight /= 2.20462;

        // var BMI = Math.round(weight / Math.pow(height, 2) * 10000);
        var BMI = Math.round(weight * 703 / Math.pow(height, 2));
        // console.log(BMI, 'BMI: ', Math.round(BMI * 100) / 100);
        // setBMI({ value: Math.round(BMI * 100) / 100, error: '' });
        setBMI({ value: BMI, error: '' });
        return
    };

    const onCheckBoxChange = (item, mainIndex, index) => {
        let newFormValues = [...checkBoxList];
        // checkBoxList[mainIndex].services[index].checked = !checkBoxList[mainIndex].services[index].checked;
        item.checked = !item.checked;
        setCheckBoxList([...newFormValues]);
    }

    const onCloseAddProviderFormModalHandler = () => {
        setCheckBoxList(null);
        for (let i = 0; i < HealthHistoryCheckBoxList.length; i++) {
            for (let j = 0; j < HealthHistoryCheckBoxList[i].services.length; j++) {
                HealthHistoryCheckBoxList[i].services[j].checked = false;
                setCheckBoxList([...HealthHistoryCheckBoxList]);
            }
        }

        setAddDemographic(addDemographicModal)
        setAddDemographicError(addDemographicModalError);

        setAddHealthHistory(addHealthHistoryModal);
        setAddHealthHistoryError(addHealthHistoryModalError);
        setBMI({ value: '', error: '' });
        setAssessmentTime('')
        setAssessmentTimeError('')
        setGetLabData([])
        setAddProviderNotesData([])
        setAddLaboratory(addLaboratoryModal);
        setAddLaboratoryError(addLaboratoryModalError);

        setAddPatientVisit(addPatientVisitModal);
        setAddPatientVisitError(addPatientVisitModalError);

        setAddProviderNotes(addProviderNotesModal);
        setAddProviderNotesError(addProviderNotesModalError);
        setSelectPatient({});
        setChecked('checked1');
        setAddProviderFormState(false);
    };

    return (
        <Modal show={addProviderFormState}>
            <ModalHeading heading="Provider Forms" onClose={onCloseAddProviderFormModalHandler} />
            <div className="tabset">
                <input
                    type="radio"
                    name="tabset"
                    id="tab1"
                    aria-controls="tab-demographic-information"
                    checked={checked === 'checked1'}
                    onChange={() => setChecked('checked1')}
                />
                <label htmlFor="tab1">Demographic Information </label>
                <input
                    type="radio"
                    name="tabset"
                    id="tab2"
                    aria-controls="tab-hhrs"
                    checked={checked === 'checked2'}
                    onChange={() => setChecked('checked2')}
                />
                <label htmlFor="tab2">Health History & Review of Systems </label>

                <input
                    type='radio'
                    name='tabset'
                    id='tab3'
                    aria-controls='tab-laboratory-values'
                    checked={checked === 'checked3'}
                    onChange={() => setChecked('checked3')}
                />
                <label htmlFor='tab3'>Laboratory Values </label>

                <input
                    type='radio'
                    name='tabset'
                    id='tab4'
                    aria-controls='tab-patient-visit'
                    checked={checked === 'checked4'}
                    onChange={() => setChecked('checked4')}
                />
                <label htmlFor='tab4'>Patient Visit </label>

                <input
                    type='radio'
                    name='tabset'
                    id='tab5'
                    aria-controls='tab-provider-notes'
                    checked={checked === 'checked5'}
                    onChange={() => setChecked('checked5')}
                />
                <label htmlFor='tab5'> Provider Notes </label>
                <div className="tab-panels">
                    <section id="tab-demographic-information" className="tab-panel">
                        {
                            getDemographic && getDemographic.loading ?
                                <AddClientSkeleton />
                                :
                                <Fragment>
                                    <ModalForm onSubmit={addDemographicHandler} style={{ marginBottom: '2.5rem', maxHeight: '33rem', overflow: 'auto' }}>
                                        <InputsSection
                                            style={{
                                                display: 'flex',
                                                justifyContent: 'flex-start', flexDirection: 'row',
                                                marginBottom: '1.5rem', paddingBottom: '0rem'
                                            }}
                                        >
                                            <ModalTextBox
                                                disabled
                                                type="text"
                                                icon="/sprite.svg#icon-user"
                                                label="First Name"
                                                id="firstName"
                                                placeholder="First Name"
                                                value={addDemographic.firstName}
                                                onChange={(event) => {
                                                    setAddDemographic({ ...addDemographic, firstName: event.target.value })
                                                    setAddDemographicError({ ...addDemographicError, firstNameError: '' })
                                                }}
                                                error={addDemographicError.firstNameError}
                                            />

                                            <ModalTextBox
                                                type="text"
                                                disabled
                                                icon="/sprite.svg#icon-user"
                                                label="Last Name"
                                                id="lastName"
                                                placeholder="Last Name"
                                                value={addDemographic.lastName}
                                                onChange={(event) => {
                                                    setAddDemographic({ ...addDemographic, lastName: event.target.value })
                                                    setAddDemographicError({ ...addDemographicError, lastNameError: '' })
                                                }}
                                                error={addDemographicError.lastNameError}
                                            />
                                            <ModalTextBox
                                                type="number"
                                                icon="/sprite.svg#icon-time"
                                                label="Age (Years)"
                                                id="age"
                                                placeholder="Age"
                                                value={addDemographic.age}
                                                onChange={(event) => {
                                                    setAddDemographic({ ...addDemographic, age: event.target.value })
                                                    setAddDemographicError({ ...addDemographicError, ageError: '' })
                                                }}
                                                error={addDemographicError.ageError}
                                            />

                                            <ModalTextBox
                                                type="date"
                                                max="1979-12-31"
                                                icon="/sprite.svg#icon-calendar"
                                                label="Date of Birth"
                                                id="doB"
                                                placeholder="Date of Birth"
                                                value={moment(addDemographic.doB).format("YYYY-MM-DD")}
                                                onChange={(event) => {
                                                    setAddDemographic({ ...addDemographic, doB: event.target.value })
                                                    setAddDemographicError({ ...addDemographicError, doBError: '' })
                                                }}
                                                error={addDemographicError.doBError}
                                            />



                                        </InputsSection>
                                        <InputsSection style={{
                                            display: 'flex',
                                            justifyContent: 'flex-start',
                                            flexDirection: 'row',
                                            marginBottom: '1.5rem', paddingBottom: '0rem'
                                        }}>
                                            <div className='modal_input' >
                                                <label htmlFor="gender" className="modal_input--label">
                                                    Gender
                                                </label>
                                                <div className='modal_input--box' style={{ minWidth: '18rem' }}>
                                                    <label htmlFor="gender" className="modal_input--iconBox">
                                                        <svg className="modal_input--icon">
                                                            <use xlinkHref="/sprite.svg#icon-user" />
                                                        </svg>
                                                    </label>
                                                    <select
                                                        className='filter__input--select'
                                                        name='gender'
                                                        id='gender'
                                                        value={addDemographic.gender}
                                                        onChange={(e) => {
                                                            setAddDemographic({ ...addDemographic, gender: e.target.value })
                                                            setAddDemographicError({ ...addDemographicError, genderError: '' })
                                                        }}
                                                    >
                                                        <option value=''>Please Select</option>
                                                        <option value='male'>Male</option>
                                                        <option value='female'>Female</option>
                                                        <option value='other'>Other</option>
                                                    </select>
                                                </div>
                                                {addDemographicError && addDemographicError.genderError &&
                                                    < p className='error_message__deleteClient'>{addDemographicError.genderError}</p>}
                                            </div>
                                            <div className='modal_input' >
                                                <label htmlFor="race" className="modal_input--label">
                                                    Race
                                                </label>
                                                <div className='modal_input--box ' style={{ minWidth: '18rem' }}>
                                                    <label htmlFor="race" className="modal_input--iconBox">
                                                        <svg className="modal_input--icon">
                                                            <use xlinkHref="/sprite.svg#icon-menu" />
                                                        </svg>
                                                    </label>
                                                    <select
                                                        className='filter__input--select'
                                                        name='race'
                                                        id='race'
                                                        value={addDemographic.race}
                                                        onChange={(e) => {
                                                            setAddDemographic({ ...addDemographic, race: e.target.value })
                                                            setAddDemographicError({ ...addDemographicError, raceError: '', raceSpesificationError: '' })
                                                        }}
                                                    >
                                                        <option value=''>Please Select</option>
                                                        {
                                                            raceList &&
                                                            raceList.length > 0 &&
                                                            raceList.map((race, i) =>
                                                                <option key={i + 1} value={race.id}>{race.title}</option>
                                                            )
                                                        }
                                                    </select>
                                                </div>
                                                {addDemographicError && addDemographicError.raceError &&
                                                    < p className='error_message__deleteClient'>{addDemographicError.raceError}</p>}
                                            </div>


                                            <ModalTextBox
                                                type="text"
                                                icon="/sprite.svg#icon-chat"
                                                label="Race Specification"
                                                id="raceSpecification"
                                                placeholder="race specification"
                                                value={addDemographic.raceSpesification}
                                                onChange={(event) => {
                                                    setAddDemographic({ ...addDemographic, raceSpesification: event.target.value })
                                                    setAddDemographicError({ ...addDemographicError, raceSpesificationError: '' })
                                                }}
                                                error={addDemographicError.raceSpesificationError}
                                            />
                                        </InputsSection>

                                        <InputsSection style={{
                                            display: 'flex',
                                            justifyContent: 'flex-start', flexDirection: 'row',
                                            marginBottom: '1.5rem', paddingBottom: '0rem'
                                        }}>
                                            <div className='modal_input' >
                                                <label htmlFor="gender" className="modal_input--label">
                                                    Ethnicity
                                                </label>
                                                <div className='modal_input--box' style={{ minWidth: '18rem' }}>
                                                    <label htmlFor="gender" className="modal_input--iconBox">
                                                        <svg className="modal_input--icon">
                                                            <use xlinkHref="/sprite.svg#icon-menu" />
                                                        </svg>
                                                    </label>
                                                    <select
                                                        className='filter__input--select'
                                                        name='ethnicity'
                                                        id='ethnicity'
                                                        value={addDemographic.ethnicity}
                                                        onChange={(e) => {
                                                            setAddDemographic({ ...addDemographic, ethnicity: e.target.value })
                                                            setAddDemographicError({ ...addDemographicError, ethnicityError: '' })
                                                        }}
                                                    >
                                                        <option value=''>Please Select</option>
                                                        <option value='hispanic'>Hispanic/Latino</option>
                                                        <option value='notHispanic'>Not Hispanic/Latino</option>
                                                    </select>
                                                </div>
                                                {addDemographicError && addDemographicError.ethnicityError &&
                                                    <p className='error_message__deleteClient'>{addDemographicError.ethnicityError}</p>
                                                }
                                            </div>
                                            <ModalTextBox
                                                type="text"
                                                icon="/sprite.svg#icon-menu"
                                                label="Preferred Language"
                                                id="Preferredlanguage"
                                                placeholder="English"
                                                value={addDemographic.preferredLanguage}
                                                onChange={(event) => {
                                                    setAddDemographic({ ...addDemographic, preferredLanguage: event.target.value })
                                                    setAddDemographicError({ ...addDemographicError, preferredLanguageError: '' })
                                                }}
                                                error={addDemographicError.preferredLanguageError}
                                            />

                                        </InputsSection>

                                        <InputsSection style={{
                                            display: 'flex',
                                            justifyContent: 'flex-start', flexDirection: 'row',
                                            marginBottom: '1.5rem', paddingBottom: '0rem'
                                        }}>
                                            <ModalTextBox
                                                type="text"
                                                icon="/sprite.svg#icon-address"
                                                label="Address Line 1"
                                                id="Address1"
                                                placeholder="Ex. Denver, USA"
                                                value={addDemographic.address1}
                                                onChange={(event) => {
                                                    setAddDemographic({ ...addDemographic, address1: event.target.value })
                                                    setAddDemographicError({ ...addDemographicError, address1Error: '' })
                                                }}
                                                error={addDemographicError.address1Error}
                                            />

                                            <ModalTextBox
                                                type="text"
                                                icon="/sprite.svg#icon-address"
                                                label="Address Line 2"
                                                id="Address2"
                                                placeholder="Ex. Denver, USA"
                                                value={addDemographic.address2}
                                                onChange={(event) => {
                                                    setAddDemographic({ ...addDemographic, address2: event.target.value })
                                                    setAddDemographicError({ ...addDemographicError, address2Error: '' })
                                                }}
                                                error={addDemographicError.address2Error}
                                            />
                                        </InputsSection>
                                        <InputsSection style={{
                                            display: 'flex',
                                            justifyContent: 'flex-start', flexDirection: 'row',
                                            marginBottom: '1.5rem', paddingBottom: '0rem'
                                        }}>
                                            <ModalTextBox
                                                type="text"
                                                icon="/sprite.svg#icon-city"
                                                label="City"
                                                id="City"
                                                placeholder="Ex. Denver"
                                                value={addDemographic.city}
                                                onChange={(event) => {
                                                    setAddDemographic({ ...addDemographic, city: event.target.value })
                                                    setAddDemographicError({ ...addDemographicError, cityError: '' })
                                                }}
                                                error={addDemographicError.cityError}
                                            />

                                            <ModalTextBox
                                                type="text"
                                                icon="/sprite.svg#icon-state"
                                                label="State "
                                                id="State"
                                                placeholder="Ex. Colorado"
                                                value={addDemographic.state}
                                                onChange={(event) => {
                                                    setAddDemographic({ ...addDemographic, state: event.target.value })
                                                    setAddDemographicError({ ...addDemographicError, stateError: '' })
                                                }}
                                                error={addDemographicError.stateError}
                                            />

                                            <ModalTextBox
                                                type="number"
                                                icon="/sprite.svg#icon-zip"
                                                label="Zip"
                                                id="zip"
                                                placeholder="Ex. 81200"
                                                value={addDemographic.zip}
                                                onChange={(event) => {
                                                    setAddDemographic({ ...addDemographic, zip: zipCodeMask(event.target.value) })
                                                    setAddDemographicError({ ...addDemographicError, zipError: '' })
                                                }}
                                                error={addDemographicError.zipError}
                                            />

                                        </InputsSection>
                                        <fieldset>
                                            <legend>
                                                Contact information <span>(If you have only one phone number, add the same in both the fields below)</span>
                                            </legend>
                                            <InputsSection style={{
                                                display: 'flex',
                                                justifyContent: 'flex-start', flexDirection: 'row'
                                            }}>
                                                <ModalTextBox
                                                    type="text"
                                                    icon="/sprite.svg#icon-phone"
                                                    label="Home Phone"
                                                    id="homePhone"
                                                    placeholder="Ex. 123-456-7891"
                                                    value={addDemographic.homePhone}
                                                    onChange={(event) => {
                                                        setAddDemographic({ ...addDemographic, homePhone: inputPhoneMasking(event.target.value) })
                                                        setAddDemographicError({ ...addDemographicError, homePhoneError: '' })
                                                    }}
                                                    error={addDemographicError.homePhoneError}
                                                />

                                                <ModalTextBox
                                                    type="text"
                                                    icon="/sprite.svg#icon-zip"
                                                    label="Mobile Phone"
                                                    id="mobilePhone"
                                                    placeholder="Ex. 123-456-7891"
                                                    value={addDemographic.mobilePhone}
                                                    onChange={(event) => {
                                                        setAddDemographic({ ...addDemographic, mobilePhone: inputPhoneMasking(event.target.value) })
                                                        setAddDemographicError({ ...addDemographicError, mobilePhoneError: '' })
                                                    }}
                                                    error={addDemographicError.mobilePhoneError}
                                                />

                                            </InputsSection>
                                        </fieldset>

                                        <fieldset>
                                            <legend>

                                                Emergency Contact <span>(If they have only one phone number, add the same in both the fields below)</span>
                                            </legend>
                                            <InputsSection style={{
                                                display: 'flex',
                                                justifyContent: 'flex-start', flexDirection: 'row'
                                            }}>
                                                <ModalTextBox
                                                    type="text"
                                                    icon="/sprite.svg#icon-user"
                                                    label="Name"
                                                    id="emergencyContactName"
                                                    placeholder="Ex. John Doe"
                                                    value={addDemographic.emergencyContactName}
                                                    onChange={(event) => {
                                                        setAddDemographic({ ...addDemographic, emergencyContactName: event.target.value })
                                                        setAddDemographicError({ ...addDemographicError, emergencyContactNameError: '' })
                                                    }}
                                                    error={addDemographicError.emergencyContactNameError}
                                                />

                                                <ModalTextBox
                                                    type="text"
                                                    icon="/sprite.svg#icon-phone"
                                                    label="Home Phone"
                                                    id="emergencyHomePhone"
                                                    placeholder="Ex. 123-456-7891"
                                                    value={addDemographic.emergencyHomePhone}
                                                    onChange={(event) => {
                                                        setAddDemographic({ ...addDemographic, emergencyHomePhone: inputPhoneMasking(event.target.value) })
                                                        setAddDemographicError({ ...addDemographicError, emergencyHomePhoneError: '' })
                                                    }}
                                                    error={addDemographicError.emergencyHomePhoneError}
                                                />

                                                <ModalTextBox
                                                    type="text"
                                                    icon="/sprite.svg#icon-phone"
                                                    label="Mobile Phone"
                                                    id="emergencyMobilePhone"
                                                    placeholder="Ex. 123-456-7891"
                                                    value={addDemographic.emergencyMobilePhone}
                                                    onChange={(event) => {
                                                        setAddDemographic({ ...addDemographic, emergencyMobilePhone: inputPhoneMasking(event.target.value) })
                                                        setAddDemographicError({ ...addDemographicError, emergencyMobilePhoneError: '' })
                                                    }}
                                                    error={addDemographicError.emergencyMobilePhoneError}
                                                />

                                            </InputsSection>
                                        </fieldset>
                                        <fieldset>
                                            <legend style={{ paddingTop: '2rem' }}>
                                                Assessment Time <span>(Select the start time for Morning, Afternoon and Evening assessments. <br />Each assessment will be open for a two-hour window from the start time selected below.)</span>
                                            </legend>
                                            <InputsSection style={{
                                                display: 'flex',
                                                justifyContent: 'flex-start', flexDirection: 'row'
                                            }}>

                                                <TimeInputDropdown
                                                    label='Morning'
                                                    value={assessmentTime.morning}
                                                    onChange={(e) => {
                                                        setAssessmentTime({ ...assessmentTime, morning: e.target.value })
                                                        setAssessmentTimeError({ ...assessmentTimeError, morning: '' })
                                                    }}
                                                    error={assessmentTimeError.morning}
                                                />
                                                <TimeInputDropdown
                                                    label='Afternoon'
                                                    value={assessmentTime.afternoon}
                                                    onChange={(e) => {
                                                        setAssessmentTime({ ...assessmentTime, afternoon: e.target.value })
                                                        setAssessmentTimeError({ ...assessmentTimeError, afternoon: '' })
                                                    }}
                                                    error={assessmentTimeError.afternoon}
                                                />
                                                <TimeInputDropdown
                                                    label='Evening'
                                                    value={assessmentTime.evening}
                                                    onChange={(e) => {
                                                        setAssessmentTime({ ...assessmentTime, evening: e.target.value })
                                                        setAssessmentTimeError({ ...assessmentTimeError, evening: '' })
                                                    }}
                                                    error={assessmentTimeError.evening}
                                                />
                                            </InputsSection>
                                        </fieldset>
                                    </ModalForm>

                                    <div className="modal__actions">
                                        <button className="modal__button modal__button--update" onClick={addDemographicHandler}>
                                            Save
                                        </button>
                                        <button className="modal__button--cancel" onClick={onCloseAddProviderFormModalHandler}>
                                            Cancel
                                        </button>
                                    </div>
                                </Fragment>
                        }

                    </section>
                    <section id="tab-hhrs" className="tab-panel">
                        {
                            getHealthHistory && getHealthHistory.loading ?
                                <AddClientSkeleton />
                                :
                                <Fragment>
                                    <ModalForm onSubmit={addHealthHistoryHandler} style={{ marginBottom: '2.5rem', maxHeight: '33rem', overflow: 'auto' }}>
                                        <InputsSection
                                            style={{
                                                display: 'flex',
                                                justifyContent: 'flex-start', flexDirection: 'row',
                                                marginBottom: '1.5rem', paddingBottom: '0rem'
                                            }}
                                        >
                                            <ModalTextBox
                                                type="number"
                                                icon="/sprite.svg#icon-user"
                                                label="Height (in)"
                                                id="height"
                                                placeholder="Ex. 60"
                                                value={addHealthHistory.height}
                                                onChange={(event) => {
                                                    setAddHealthHistory({ ...addHealthHistory, height: event.target.value })
                                                    setAddHealthHistoryError({ ...addHealthHistoryError, heightError: '' })
                                                    onBMIChangeHandler(event.target.value, addHealthHistory.weight)
                                                }}
                                                error={addHealthHistoryError.heightError}
                                            />

                                            <ModalTextBox
                                                type="number"
                                                icon="/sprite.svg#icon-user"
                                                label="Weight (lbs)"
                                                id="weight"
                                                placeholder="Ex. 130"
                                                value={addHealthHistory.weight}
                                                onChange={(event) => {
                                                    setAddHealthHistory({ ...addHealthHistory, weight: event.target.value })
                                                    setAddHealthHistoryError({ ...addHealthHistoryError, weightError: '' })
                                                    onBMIChangeHandler(addHealthHistory.height, event.target.value)
                                                }}
                                                error={addHealthHistoryError.weightError}
                                            />

                                            <ModalTextBox
                                                type="number"
                                                icon="/sprite.svg#icon-time"
                                                label="BMI"
                                                id="bmi"
                                                placeholder="20"
                                                value={bmi.value}
                                                error={bmi.error}
                                                onChange={(event) => onBMIChangeHandler(addHealthHistory.height, addHealthHistory.weight)}
                                            />
                                        </InputsSection>

                                        {
                                            checkBoxList &&
                                            checkBoxList.length > 0 &&
                                            checkBoxList.map((item, index) =>
                                                <InputsSection style={{
                                                    display: 'flex',
                                                    flexDirection: 'column',
                                                    marginBottom: '1rem',
                                                    paddingBottom: '0rem',
                                                    alignItems: 'start'
                                                }}
                                                    key={index}
                                                >
                                                    <fieldset>
                                                        <legend>
                                                            {item.title} :
                                                        </legend>
                                                        {item.services.map((item, i) =>
                                                            <div className="checkboxInput" key={i} >
                                                                <ModalCheckBox
                                                                    label={item.title}
                                                                    checked={item.checked}
                                                                    onChange={() => {
                                                                        onCheckBoxChange(item, index, i)
                                                                    }}
                                                                />
                                                            </div>)}
                                                    </fieldset>
                                                </InputsSection>
                                            )
                                        }
                                    </ModalForm>
                                    <div className="modal__actions">
                                        <button className="modal__button modal__button--update" onClick={addHealthHistoryHandler}>
                                            Save
                                        </button>
                                        <button className="modal__button--cancel" onClick={onCloseAddProviderFormModalHandler}>
                                            Cancel
                                        </button>
                                    </div>
                                </Fragment>
                        }
                    </section>
                    <section id='tab-laboratory-values' className='tab-panel'>
                        {
                            getLaboratory && getLaboratory.loading ?
                                <AddClientSkeleton />
                                :
                                <Fragment>
                                    <ModalForm onSubmit={addLaboratoryHandler} style={{ marginBottom: '2.5rem', maxHeight: '33rem', overflow: 'auto' }}>
                                        <InputsSection style={{
                                            display: 'flex',
                                            justifyContent: 'flex-start',
                                            flexDirection: 'row',
                                            marginBottom: '1.5rem', paddingBottom: '0rem'
                                        }}>
                                            <div className='modal_input' >
                                                <label htmlFor="cbc" className="modal_input--label">
                                                    CBC
                                                </label>
                                                <div className='modal_input--box' style={{ minWidth: '18rem' }}>
                                                    <label htmlFor="cbc" className="modal_input--iconBox">
                                                        <svg className="modal_input--icon">
                                                            <use xlinkHref="/sprite.svg#icon-menu" />
                                                        </svg>
                                                    </label>
                                                    <select
                                                        className='filter__input--select'
                                                        name='CBC'
                                                        id='cbc'
                                                        value={addLaboratory.cbc}
                                                        onChange={(e) => {
                                                            setAddLaboratory({ ...addLaboratory, cbc: e.target.value })
                                                            setAddLaboratoryError({ ...addLaboratoryError, cbc: '' })
                                                        }}
                                                    >
                                                        <option value=''>Please Select</option>
                                                        <option value='WithinNormalLimits'>Within Normal Limits</option>
                                                        <option value='NotWithinNormalLimits'>Not Within Normal Limits</option>
                                                    </select>
                                                </div>
                                                {addLaboratoryError && addLaboratoryError.cbc &&
                                                    <p className='error_message__deleteClient'>{addLaboratoryError.cbc}</p>
                                                }
                                            </div>
                                            <div className='modal_input' >
                                                <label htmlFor="bmp" className="modal_input--label">
                                                    BMP
                                                </label>
                                                <div className='modal_input--box ' style={{ minWidth: '18rem' }}>
                                                    <label htmlFor="bmp" className="modal_input--iconBox">
                                                        <svg className="modal_input--icon">
                                                            <use xlinkHref="/sprite.svg#icon-menu" />
                                                        </svg>
                                                    </label>
                                                    <select
                                                        className='filter__input--select'
                                                        name='bmp'
                                                        id='bmp'
                                                        value={addLaboratory.bmp}
                                                        onChange={(e) => {
                                                            setAddLaboratory({ ...addLaboratory, bmp: e.target.value })
                                                            setAddLaboratoryError({ ...addLaboratoryError, bmp: '', cbc: '' })
                                                        }}
                                                    >
                                                        <option value=''>Please Select</option>
                                                        <option value='WithinNormalLimits'>Within Normal Limits</option>
                                                        <option value='NotWithinNormalLimits'>Not Within Normal Limits</option>
                                                    </select>
                                                </div>
                                                <p className='error_message__deleteClient'>{addLaboratoryError.bmp}</p>
                                            </div>
                                            <div className='modal_input' >
                                                <label htmlFor="uds" className="modal_input--label">
                                                    UDS
                                                </label>
                                                <div className='modal_input--box' style={{ minWidth: '18rem' }}>
                                                    <label htmlFor="uds" className="modal_input--iconBox">
                                                        <svg className="modal_input--icon">
                                                            <use xlinkHref="/sprite.svg#icon-menu" />
                                                        </svg>
                                                    </label>
                                                    <select
                                                        className='filter__input--select'
                                                        name='uds'
                                                        id='uds'
                                                        value={addLaboratory.uds}
                                                        onChange={(e) => {
                                                            setAddLaboratory({ ...addLaboratory, uds: e.target.value })
                                                            setAddLaboratoryError({ ...addLaboratoryError, uds: '', cbc: '' })
                                                        }}
                                                    >
                                                        <option value=''>Please Select</option>
                                                        <option value='consistent'>Consistent</option>
                                                        <option value='inconsistent'>Inconsistent</option>
                                                    </select>
                                                </div>
                                                <p className='error_message__deleteClient'>{addLaboratoryError.uds}</p>
                                            </div>

                                            <div className='modal_input' >
                                                <label htmlFor="ekg" className="modal_input--label">
                                                    EKG
                                                </label>
                                                <div className='modal_input--box' style={{ minWidth: '18rem' }}>
                                                    <label htmlFor="ekg" className="modal_input--iconBox">
                                                        <svg className="modal_input--icon">
                                                            <use xlinkHref="/sprite.svg#icon-menu" />
                                                        </svg>
                                                    </label>
                                                    <select
                                                        className='filter__input--select'
                                                        name='ekg'
                                                        id='ekg'
                                                        value={addLaboratory.ekg}
                                                        onChange={(e) => {
                                                            setAddLaboratory({ ...addLaboratory, ekg: e.target.value })
                                                            setAddLaboratoryError({ ...addLaboratoryError, ekg: '', cbc: '' })
                                                        }}
                                                    >
                                                        <option value=''>Please Select</option>
                                                        <option value='WithinNormalLimits'>Within Normal Limits</option>
                                                        <option value='NotWithinNormalLimits'>Not Within Normal Limits</option>
                                                    </select>
                                                </div>
                                                <p className='error_message__deleteClient'>{addLaboratoryError.ekg}</p>
                                            </div>
                                        </InputsSection>
                                    </ModalForm>
                                    <LabTable
                                        data={{ getLabData, setGetLabData }}
                                    />

                                    <div className="modal__actions">
                                        <button className="modal__button modal__button--update" onClick={addLaboratoryHandler}>
                                            Save
                                        </button>
                                        <button className="modal__button--cancel" onClick={onCloseAddProviderFormModalHandler}>
                                            Cancel
                                        </button>
                                    </div>
                                </Fragment>
                        }
                    </section>
                    <section id='tab-patient-visit' className='tab-panel'>
                        {
                            getPatientVisit && getPatientVisit.loading ?
                                <AddClientSkeleton />
                                :
                                <Fragment>
                                    <ModalForm onSubmit={addPatientVisitHandler} style={{ marginBottom: '2.5rem', maxHeight: '33rem', overflow: 'auto' }}>
                                        <InputsSection style={{
                                            display: 'flex',
                                            justifyContent: 'flex-start',
                                            flexDirection: 'row',
                                            marginBottom: '1rem', paddingBottom: '0rem'
                                        }}>
                                            <fieldset>
                                                <legend>
                                                    Vitals
                                                </legend>
                                                <InputsSection style={{
                                                    display: 'flex',
                                                    justifyContent: 'flex-start', flexDirection: 'row'
                                                }}>
                                                    <ModalTextBox
                                                        type="text"
                                                        icon="/sprite.svg#icon-user"
                                                        label="Temp(F)"
                                                        id="temp"
                                                        placeholder="Ex. 98.7"
                                                        value={addPatientVisit.temp}
                                                        onChange={(event) => {
                                                            setAddPatientVisit({ ...addPatientVisit, temp: event.target.value })
                                                            setAddPatientVisitError({ ...addPatientVisitError, temp: '' })
                                                        }}
                                                        error={addPatientVisitError.temp}
                                                    />

                                                    <ModalTextBox
                                                        type="text"
                                                        icon="/sprite.svg#icon-user"
                                                        label="BP"
                                                        id="bp"
                                                        placeholder="Ex. 120/85"
                                                        value={addPatientVisit.bp}
                                                        onChange={(event) => {
                                                            setAddPatientVisit({ ...addPatientVisit, bp: event.target.value })
                                                            setAddPatientVisitError({ ...addPatientVisitError, bp: '' })
                                                        }}
                                                        error={addPatientVisitError.bp}
                                                    />

                                                    <ModalTextBox
                                                        type="text"
                                                        icon="/sprite.svg#icon-user"
                                                        label="HR"
                                                        id="hr"
                                                        placeholder="Ex. 100"
                                                        value={addPatientVisit.hr}
                                                        onChange={(event) => {
                                                            setAddPatientVisit({ ...addPatientVisit, hr: event.target.value })
                                                            setAddPatientVisitError({ ...addPatientVisitError, hr: '' })
                                                        }}
                                                        error={addPatientVisitError.hr}
                                                    />

                                                    <ModalTextBox
                                                        type="text"
                                                        icon="/sprite.svg#icon-user"
                                                        label="RR"
                                                        id="rr"
                                                        placeholder="Ex. 60"
                                                        value={addPatientVisit.rr}
                                                        onChange={(event) => {
                                                            setAddPatientVisit({ ...addPatientVisit, rr: event.target.value })
                                                            setAddPatientVisitError({ ...addPatientVisitError, rr: '' })
                                                        }}
                                                        error={addPatientVisitError.rr}
                                                    />
                                                </InputsSection>
                                            </fieldset>
                                        </InputsSection>
                                        <InputsSection style={{
                                            display: 'flex',
                                            justifyContent: 'flex-start',
                                            flexDirection: 'row',
                                            marginBottom: '1rem', paddingBottom: '0rem'
                                        }}>
                                            <fieldset>
                                                <legend>
                                                    Flight of Stairs Exercise
                                                </legend>
                                                <InputsSection style={{
                                                    display: 'flex',
                                                    justifyContent: 'flex-start', flexDirection: 'row'
                                                }}>
                                                    <ModalTextBox
                                                        type="text"
                                                        icon="/sprite.svg#icon-user"
                                                        label="Pre-exercise NRS (0-10)"
                                                        id="stairsPreExercise"
                                                        placeholder="Ex. 5"
                                                        value={addPatientVisit.stairsPreExercise}
                                                        onChange={(event) => {
                                                            setAddPatientVisit({ ...addPatientVisit, stairsPreExercise: twoDigitMask(event.target.value) })
                                                            setAddPatientVisitError({ ...addPatientVisitError, stairsPreExercise: '' })
                                                        }}
                                                        error={addPatientVisitError.stairsPreExercise}
                                                    />


                                                    <div>
                                                        <ModalTextBox
                                                            type="text"
                                                            icon="/sprite.svg#icon-user"
                                                            label="Time taken to complete the exercise "
                                                            id="timeTaken"
                                                            placeholder="Ex. 02::20"
                                                            value={addPatientVisit.takingTime}
                                                            onChange={(event) => {
                                                                setAddPatientVisit({ ...addPatientVisit, takingTime: event.target.value })
                                                                setAddPatientVisitError({ ...addPatientVisitError, takingTime: '' })
                                                            }}
                                                            error={addPatientVisitError.takingTime}
                                                        />
                                                        <p style={{ marginBottom: '-1.5rem' }}>
                                                            (ascend one 6 steps, turn and descend in mm:ss)
                                                        </p>
                                                    </div>


                                                    <ModalTextBox
                                                        type="text"
                                                        icon="/sprite.svg#icon-user"
                                                        label="Post-exercise NRS (0-10) "
                                                        id="stairsPostExercise"
                                                        placeholder="Ex. 5"
                                                        value={addPatientVisit.stairsPostExercise}
                                                        onChange={(event) => {
                                                            setAddPatientVisit({ ...addPatientVisit, stairsPostExercise: twoDigitMask(event.target.value) })
                                                            setAddPatientVisitError({ ...addPatientVisitError, stairsPostExercise: '' })
                                                        }}
                                                        error={addPatientVisitError.stairsPostExercise}
                                                    />
                                                </InputsSection>
                                            </fieldset>


                                        </InputsSection>
                                        <InputsSection style={{
                                            display: 'flex',
                                            justifyContent: 'flex-start',
                                            flexDirection: 'row',
                                            marginBottom: '1rem', paddingBottom: '0rem'
                                        }}>
                                            <fieldset>
                                                <legend>
                                                    Forward and Side Bending Exercise <span>(NRS - Forward/Side Bending - NRS) </span>
                                                </legend>
                                                <InputsSection style={{
                                                    display: 'flex',
                                                    justifyContent: 'flex-start', flexDirection: 'row'
                                                }}>
                                                    <ModalTextBox
                                                        type="text"
                                                        icon="/sprite.svg#icon-user"
                                                        label="Pre-exercise NRS (0-10)"
                                                        id="forwardPreExercise"
                                                        placeholder="Ex. 6"
                                                        value={addPatientVisit.forwardPreExercise}
                                                        onChange={(event) => {
                                                            setAddPatientVisit({ ...addPatientVisit, forwardPreExercise: twoDigitMask(event.target.value) })
                                                            setAddPatientVisitError({ ...addPatientVisitError, forwardPreExercise: '' })
                                                        }}
                                                        error={addPatientVisitError.forwardPreExercise}
                                                    />
                                                </InputsSection>
                                                <InputsSection style={{
                                                    display: 'flex',
                                                    justifyContent: 'flex-start', flexDirection: 'row'
                                                }}>
                                                    <div>
                                                        <ModalTextBox
                                                            type="text"
                                                            icon="/sprite.svg#icon-user"
                                                            label="Forward bending "
                                                            id="forwardBending"
                                                            placeholder="Ex. 30"
                                                            value={addPatientVisit.forwardBending}
                                                            onChange={(event) => {
                                                                setAddPatientVisit({ ...addPatientVisit, forwardBending: event.target.value })
                                                                setAddPatientVisitError({ ...addPatientVisitError, forwardBending: '' })
                                                            }}
                                                            error={addPatientVisitError.forwardBending}
                                                        />
                                                        <p style={{ marginBottom: '-1.5rem' }}>
                                                            (between middle finger and floor in cm)
                                                        </p>
                                                    </div>
                                                    <div>
                                                        <ModalTextBox
                                                            type="text"
                                                            icon="/sprite.svg#icon-user"
                                                            label="Right bending  "
                                                            id="rightBending"
                                                            placeholder="Ex. 30"
                                                            value={addPatientVisit.rightBending}
                                                            onChange={(event) => {
                                                                setAddPatientVisit({ ...addPatientVisit, rightBending: event.target.value })
                                                                setAddPatientVisitError({ ...addPatientVisitError, rightBending: '' })
                                                            }}
                                                            error={addPatientVisitError.rightBending}
                                                        />
                                                        <p style={{ marginBottom: '-1.5rem' }}>
                                                            (between middle finger and floor in cm)
                                                        </p>
                                                    </div>
                                                    <div>
                                                        <ModalTextBox
                                                            type="text"
                                                            icon="/sprite.svg#icon-user"
                                                            label="Left bending"
                                                            id="leftBending"
                                                            placeholder="Ex. 30"
                                                            value={addPatientVisit.leftBending}
                                                            onChange={(event) => {
                                                                setAddPatientVisit({ ...addPatientVisit, leftBending: event.target.value })
                                                                setAddPatientVisitError({ ...addPatientVisitError, leftBending: '' })
                                                            }}
                                                            error={addPatientVisitError.leftBending}
                                                        />
                                                        <p style={{ marginBottom: '-1.5rem' }}>
                                                            (between middle finger and floor in cm)
                                                        </p>
                                                    </div>
                                                </InputsSection>
                                                <InputsSection style={{
                                                    display: 'flex',
                                                    justifyContent: 'flex-start', flexDirection: 'row'
                                                }}>
                                                    <ModalTextBox
                                                        type="text"
                                                        icon="/sprite.svg#icon-user"
                                                        label="Post-exercise NRS (0-10) "
                                                        id="forwardPostExersice"
                                                        placeholder="Ex. 5"
                                                        value={addPatientVisit.forwardPostExersice}
                                                        onChange={(event) => {
                                                            setAddPatientVisit({ ...addPatientVisit, forwardPostExersice: twoDigitMask(event.target.value) })
                                                            setAddPatientVisitError({ ...addPatientVisitError, forwardPostExersice: '' })
                                                        }}
                                                        error={addPatientVisitError.forwardPostExersice}
                                                    />
                                                </InputsSection>
                                            </fieldset>
                                        </InputsSection>
                                        <InputsSection style={{
                                            display: 'flex',
                                            justifyContent: 'flex-start',
                                            flexDirection: 'row',
                                            marginBottom: '1rem', paddingBottom: '0rem'
                                        }}>
                                            <fieldset>
                                                <legend>
                                                    Pill Count
                                                    {/* <span> (0-500)</span> */}
                                                </legend>
                                                <InputsSection style={{
                                                    display: 'flex',
                                                    justifyContent: 'flex-start', flexDirection: 'row'
                                                }}>
                                                    <ModalTextBox
                                                        type="text"
                                                        icon="/sprite.svg#icon-user"
                                                        label="Hydrocodone Amount Dispensed"
                                                        id="HydrocodoneDispensed"
                                                        placeholder="Ex. 5"
                                                        value={addPatientVisit.hydrocodoneAmountDispensed}
                                                        onChange={(event) => {
                                                            setAddPatientVisit({ ...addPatientVisit, hydrocodoneAmountDispensed: event.target.value })
                                                            setAddPatientVisitError({ ...addPatientVisitError, hydrocodoneAmountDispensed: '' })
                                                        }}
                                                        error={addPatientVisitError.hydrocodoneAmountDispensed}
                                                    />

                                                    <ModalTextBox
                                                        type="text"
                                                        icon="/sprite.svg#icon-user"
                                                        label="Hydrocodone Amount Returned"
                                                        id="HydrocodoneReturned"
                                                        placeholder="Ex. 5"
                                                        value={addPatientVisit.hydrocodoneReturned}
                                                        onChange={(event) => {
                                                            setAddPatientVisit({ ...addPatientVisit, hydrocodoneReturned: event.target.value })
                                                            setAddPatientVisitError({ ...addPatientVisitError, hydrocodoneReturned: '' })
                                                        }}
                                                        error={addPatientVisitError.hydrocodoneReturned}
                                                    />
                                                    <ModalTextBox
                                                        type="text"
                                                        icon="/sprite.svg#icon-user"
                                                        label="Tylenol Amount Dispensed"
                                                        id="TylenolDispensed"
                                                        placeholder="Ex. 5"
                                                        value={addPatientVisit.tylenolDispensed}
                                                        onChange={(event) => {
                                                            setAddPatientVisit({ ...addPatientVisit, tylenolDispensed: event.target.value })
                                                            setAddPatientVisitError({ ...addPatientVisitError, tylenolDispensed: '' })
                                                        }}
                                                        error={addPatientVisitError.tylenolDispensed}
                                                    />
                                                    <ModalTextBox
                                                        type="text"
                                                        icon="/sprite.svg#icon-user"
                                                        label="Tylenol Amount Returned"
                                                        id="TylenolReturned"
                                                        placeholder="Ex. 5"
                                                        value={addPatientVisit.tylenolReturned}
                                                        onChange={(event) => {
                                                            setAddPatientVisit({ ...addPatientVisit, tylenolReturned: event.target.value })
                                                            setAddPatientVisitError({ ...addPatientVisitError, tylenolReturned: '' })
                                                        }}
                                                        error={addPatientVisitError.tylenolReturned}
                                                    />
                                                </InputsSection>
                                                <InputsSection style={{
                                                    display: 'flex',
                                                    justifyContent: 'flex-start', flexDirection: 'row'
                                                }}>
                                                    <ModalTextBox
                                                        type="text"
                                                        icon="/sprite.svg#icon-user"
                                                        label="BBF/Placebo Amount Dispensed"
                                                        id="BBFDispensed"
                                                        placeholder="Ex. 5"
                                                        value={addPatientVisit.BBFDispensed}
                                                        onChange={(event) => {
                                                            setAddPatientVisit({ ...addPatientVisit, BBFDispensed: event.target.value })
                                                            setAddPatientVisitError({ ...addPatientVisitError, BBFDispensed: '' })
                                                        }}
                                                        error={addPatientVisitError.BBFDispensed}
                                                    />
                                                    <ModalTextBox
                                                        type="text"
                                                        icon="/sprite.svg#icon-user"
                                                        label="BBF/Placebo Amount Returned"
                                                        id="BBFReturned"
                                                        placeholder="Ex. 5"
                                                        value={addPatientVisit.BBFReturned}
                                                        onChange={(event) => {
                                                            setAddPatientVisit({ ...addPatientVisit, BBFReturned: event.target.value })
                                                            setAddPatientVisitError({ ...addPatientVisitError, BBFReturned: '' })
                                                        }}
                                                        error={addPatientVisitError.BBFReturned}
                                                    />
                                                </InputsSection>
                                            </fieldset>
                                        </InputsSection>
                                        <InputsSection style={{
                                            display: 'flex',
                                            justifyContent: 'flex-start',
                                            flexDirection: 'row',
                                            marginBottom: '1rem', paddingBottom: '0rem'
                                        }}>
                                            <ModalTextBox
                                                type="text"
                                                icon="/sprite.svg#icon-user"
                                                label="Visual Analog Scale (cm) "
                                                id="visualAnalogScale"
                                                placeholder="Ex. 42"
                                                value={addPatientVisit.analogScale}
                                                onChange={(event) => {
                                                    setAddPatientVisit({ ...addPatientVisit, analogScale: event.target.value })
                                                    setAddPatientVisitError({ ...addPatientVisitError, analogScale: '' })
                                                }}
                                                error={addPatientVisitError.analogScale}
                                            />

                                        </InputsSection>
                                        <InputsSection style={{
                                            display: 'flex',
                                            justifyContent: 'flex-start',
                                            flexDirection: 'row',
                                            marginBottom: '1.5rem', paddingBottom: '0rem'
                                        }}>
                                            <TextAreaInput
                                                label='Visit Notes'
                                                placeholder='Notes...'
                                                style={{ alignItems: 'center', justifyContent: 'center', height: '5rem' }}
                                                value={addPatientVisit.visitNotes}
                                                onChange={(e) => {
                                                    setAddPatientVisit({ ...addPatientVisit, visitNotes: e.target.value })
                                                    setAddPatientVisitError({ ...addPatientVisitError, visitNotes: '' })
                                                }}
                                                error={addPatientVisitError.visitNotes}
                                            />
                                        </InputsSection>
                                    </ModalForm>

                                    <div className="modal__actions">
                                        <button className="modal__button modal__button--update" onClick={addPatientVisitHandler}>
                                            Save
                                        </button>
                                        <button className="modal__button--cancel" onClick={onCloseAddProviderFormModalHandler}>
                                            Cancel
                                        </button>
                                    </div>
                                </Fragment>
                        }
                    </section>
                    <section id='tab-provider-notes' className='tab-panel'>
                        {
                            getProviderNotes && getProviderNotes.loading ?
                                <AddClientSkeleton />
                                :
                                <Fragment>
                                    <ModalForm onSubmit={addProviderNotesHandler} style={{ marginBottom: '2.5rem', maxHeight: '33rem', overflow: 'auto' }}>
                                        <InputsSection style={{
                                            display: 'flex',
                                            justifyContent: 'flex-start',
                                            flexDirection: 'row',
                                            marginBottom: '1.5rem', paddingBottom: '0rem'
                                        }}>

                                            <ModalTextBox
                                                type="text"
                                                max='10'
                                                icon="/sprite.svg#icon-user"
                                                label="NRS on Phone Call (0-10) "
                                                id="NRSPhone"
                                                placeholder="Ex. 6"
                                                style={{ alignItems: 'center', justifyContent: 'center', height: '100%', width: '33rem' }}
                                                value={twoDigitMask(addProviderNotes.nrs)}
                                                onChange={(event) => {
                                                    setAddProviderNotes({ ...addProviderNotes, nrs: event.target.value })
                                                    setAddProviderNotesError({ ...addProviderNotesError, nrs: '' })
                                                }}
                                                error={addProviderNotesError.nrs}
                                            />

                                        </InputsSection>
                                        <InputsSection style={{
                                            display: 'flex',
                                            justifyContent: 'flex-start',
                                            flexDirection: 'row',
                                            marginBottom: '1.5rem', paddingBottom: '0rem'
                                        }}>
                                            <TextAreaInput
                                                label='Notes'
                                                placeholder='Notes...'
                                                style={{ alignItems: 'center', justifyContent: 'center', height: '100%' }}
                                                value={addProviderNotes.notes}
                                                onChange={(e) => {
                                                    setAddProviderNotes({ ...addProviderNotes, notes: e.target.value })
                                                    setAddProviderNotesError({ ...addProviderNotesError, notes: '', nrs: '' })
                                                }}
                                                error={setAddProviderNotesError.notes}
                                            />
                                        </InputsSection>
                                    </ModalForm>
                                    <ProviderNotesTable
                                        data={{ addProviderNotesData }} />

                                    <div className="modal__actions">
                                        <button className="modal__button modal__button--update" onClick={addProviderNotesHandler}>
                                            Save
                                        </button>
                                        <button className="modal__button--cancel" onClick={onCloseAddProviderFormModalHandler}>
                                            Cancel
                                        </button>
                                    </div>
                                </Fragment>
                        }
                    </section>
                </div>
            </div>
        </Modal >
    );
};

export default AddProviderFormModal;